"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const gulp_1 = __importDefault(require("gulp"));
const gulp_sourcemaps_1 = __importDefault(require("gulp-sourcemaps"));
const gulp_typescript_1 = __importDefault(require("gulp-typescript"));
const internal_1 = require("../../internal");
class BuildTasks {
    constructor(_context) {
        this._context = _context;
    }
    get buildTask() {
        if (this._buildTask === undefined) {
            this._buildTask = this.createBuildTask();
        }
        return this._buildTask;
    }
    get allTasks() {
        return [this.buildTask];
    }
    createBuildTask() {
        let task;
        if (this._context.project.workspaces.length > 0) {
            task = gulp_1.default.series(internal_1.getCleanTasks(this._context).cleanTask, this.createWorkspacesBuildTask());
        }
        else {
            let projectSources = this._context.project.sources;
            let tsProject = gulp_typescript_1.default.createProject(projectSources.tsConfig);
            let taskFunction = done => {
                let tsResult = gulp_1.default.src(projectSources.sourceFileGlobs.includes.concat(projectSources.sourceFileGlobs.excludes.map(_ => '!' + _)))
                    .pipe(gulp_sourcemaps_1.default.init())
                    .pipe(tsProject());
                tsResult.dts
                    .pipe(gulp_1.default.dest(projectSources.outputFolder));
                return tsResult.js
                    .pipe(gulp_sourcemaps_1.default.write())
                    .pipe(gulp_1.default.dest(projectSources.outputFolder))
                    .on('end', _ => done())
                    .on('error', err => done(err));
            };
            taskFunction.displayName = `build:${this._context.project.rootPackage.packageObject.name}`;
            task = gulp_1.default.series(internal_1.getCleanTasks(this._context).cleanTask, taskFunction);
        }
        task.displayName = 'build';
        return task;
    }
    createWorkspacesBuildTask() {
        let tasks = [];
        let streams = [];
        this._context.project.workspaces.forEach(workspace => {
            let projectSources = workspace.sources;
            let tsProject = gulp_typescript_1.default.createProject(projectSources.tsConfig);
            let taskFunction = done => {
                let tsResult = gulp_1.default.src(projectSources.sourceFileGlobs.includes.concat(projectSources.sourceFileGlobs.excludes.map(_ => '!' + _)))
                    .pipe(gulp_sourcemaps_1.default.init())
                    .pipe(tsProject());
                streams.push({ stream: tsResult.js, dest: projectSources.outputFolder });
                streams.push({ stream: tsResult.dts, dest: projectSources.outputFolder });
                tsResult
                    .on('end', _ => done())
                    .on('error', err => done(err));
                return tsResult;
            };
            taskFunction.displayName = `build:${workspace.workspacePackage.packageObject.name}`;
            tasks.push(taskFunction);
        });
        let writeFilesTask = done => {
            let counter = 0;
            for (let _ of streams) {
                let stream = _.stream
                    .pipe(gulp_1.default.dest(_.dest))
                    .on('end', _ => {
                    counter += 1;
                    if (counter === streams.length)
                        done();
                })
                    .on('error', err => done(err));
            }
        };
        writeFilesTask.displayName = 'build-write-files';
        let parallelBuild = gulp_1.default.parallel(tasks);
        parallelBuild.displayName = 'build-parallel';
        let task = gulp_1.default.series(parallelBuild, writeFilesTask);
        return task;
    }
}
exports.BuildTasks = BuildTasks;
function getBuildTasks(context) {
    if (BuildTasks.buildTasks === undefined)
        BuildTasks.buildTasks = new BuildTasks(context);
    return BuildTasks.buildTasks;
}
exports.getBuildTasks = getBuildTasks;
//# sourceMappingURL=data:application/json;base64,