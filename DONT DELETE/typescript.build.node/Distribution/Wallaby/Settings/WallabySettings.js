"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
class WallabySettings {
    constructor(_wallaby, _project, _setup, _settingsCallback) {
        this._wallaby = _wallaby;
        this._project = _project;
        this._setup = _setup;
        this._settingsCallback = _settingsCallback;
        this.createFiles();
        this.createTests();
        this.createCompilers();
    }
    get settings() {
        let settings = {
            files: this.files,
            tests: this.tests,
            compilers: this.compilers,
            setup: this._setup.setup,
            testFramework: 'mocha',
            env: {
                type: 'node',
                runner: 'node'
            },
        };
        if (typeof this._settingsCallback === 'function')
            this._settingsCallback(this._wallaby, settings);
        return settings;
    }
    get files() {
        if (this._files === undefined)
            this.createFiles();
        return this._files;
    }
    get tests() {
        if (this._tests === undefined)
            this.createTests();
        return this._tests;
    }
    get compilers() {
        if (this._compilers === undefined)
            this.createCompilers();
        return this._compilers;
    }
    createFiles() {
        this._files = [];
        this._files.push(...this.getBaseFiles());
        let sources = this._project.sources;
        this.globsAsRelativeGlobs(sources.declarationFilesGlobs.includes).forEach(glob => this._files.push({ pattern: glob, ignore: true }));
        this.globsAsRelativeGlobs(sources.compiledFilesGlobs.includes).forEach(glob => this._files.push({ pattern: glob, ignore: true }));
        this.globsAsRelativeGlobs(sources.testFileGlobs.includes).forEach(glob => this._files.push({ pattern: glob, ignore: true }));
        this.globsAsRelativeGlobs(sources.testSetupFileGlobs.includes).forEach(glob => this._files.push({ pattern: glob, instrument: false }));
        this.globsAsRelativeGlobs(sources.sourceFileGlobs.includes).forEach(glob => this._files.push({ pattern: glob }));
    }
    createTests() {
        this._tests = [];
        let sources = this._project.sources;
        this.globsAsRelativeGlobs(sources.declarationFilesGlobs.includes).forEach(glob => this._tests.push({ pattern: glob, ignore: true }));
        this.globsAsRelativeGlobs(sources.compiledFilesGlobs.includes).forEach(glob => this._tests.push({ pattern: glob, ignore: true }));
        this.globsAsRelativeGlobs(sources.testSetupFileGlobs.includes).forEach(glob => this._tests.push({ pattern: glob, ignore: true }));
        this.globsAsRelativeGlobs(sources.testFileGlobs.includes).forEach(glob => this._tests.push({ pattern: glob }));
    }
    createCompilers() {
        this._compilers = {};
        let sources = this._project.sources;
        this.globsAsRelativeGlobs(sources.sourceFileGlobs.includes).forEach(glob => {
            this._compilers[glob] = this._wallaby.compilers.typeScript({ module: 'cjs', downlevelIteration: true, experimentalDecorators: true, esModuleInterop: true });
        });
    }
    getBaseFiles() {
        let baseFiles = [{ pattern: 'package.json', instrument: false }];
        if (this._project.workspaces.length > 0) {
            baseFiles.push({ pattern: `${this.getRelativePathToSource()}/**/package.json`, instrument: false });
            baseFiles.push({ pattern: `${this.getRelativePathToSource()}/**/node_modules/**/*`, instrument: false });
        }
        return baseFiles.concat([
            { pattern: 'node_modules/chai/**/*', instrument: false },
            { pattern: 'node_modules/chai-as-promised/**/*', instrument: false },
            { pattern: 'node_modules/sinon/pkg/**/*', instrument: false },
            { pattern: 'node_modules/sinon-chai/**/*', instrument: false },
            { pattern: 'node_modules/@dolittle/typescript.build/**/*', instrument: false }
        ]);
    }
    globsAsRelativeGlobs(globs) {
        let root = process.platform === "win32"? this._project.sources.rootFolder.replace(/\\/g, `/`) : this._project.sources.rootFolder
        
        return globs.map(glob => glob.replace(`${root}/`, ''));
    }
    getRelativePathToSource() {
        let sourceFilesRoot = this._project.sources.sourceFilesRoot;
        let root = this._project.sources.rootFolder;
        return root === sourceFilesRoot ? '' : sourceFilesRoot.replace(`${root}${path_1.default.sep}`, '');
    }
}
exports.WallabySettings = WallabySettings;
//# sourceMappingURL=data:application/json;base64,
