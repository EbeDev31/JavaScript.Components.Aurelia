"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class WallabySetup {
    constructor(_w, _project, _setupCallback) {
        this._w = _w;
        this._project = _project;
        this._setupCallback = _setupCallback;
    }
    get setup() {
        if (this._setup === undefined)
            this._setup = this.getSetupFunction();
        return this._setup;
    }
    getFunctionBody(func) {
        var entire = func.toString();
        var body = entire.substring(entire.indexOf("{") + 1, entire.lastIndexOf("}"));
        return body;
    }
    getSetupFunction() {
        let setup = (wallaby) => {
            process.env.IS_TESTING = true;
            let Project = require('@dolittle/typescript.build').Project;
            
            let project = new Project(process.cwd());
            if (project.workspaces.length > 0) {
                let aliases = {};
                project.workspaces.forEach((workspace) => {
                    let packageObject = workspace.workspacePackage.packageObject;
                    let rootFolder = workspace.workspacePackage.rootFolder;
                    aliases[packageObject.name] = rootFolder;
                });
                require('module-alias').addAliases(aliases);
            }
            global.expect = chai.expect;
            let should = chai.should();
            global.sinon = require('sinon');
            let sinonChai = require('sinon-chai');
            let chaiAsPromised = require('chai-as-promised');
            chai.use(sinonChai);
            chai.use(chaiAsPromised);
            global.mock = require('@fluffy-spoon/substitute').Substitute;
        };
        if (typeof this._setupCallback === 'function') {
            var setupBody = this.getFunctionBody(setup);
            var setupCallbackBody = this.getFunctionBody(this._setupCallback);
            var combined = setupBody + '\n' + setupCallbackBody;
            var newFunction = new Function(combined);
            return newFunction;
        }
        return setup;
    }
}
exports.WallabySetup = WallabySetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGFieVNldHVwLmpzIiwic291cmNlUm9vdCI6Ii4vU291cmNlLyIsInNvdXJjZXMiOlsiV2FsbGFieS9TZXR0aW5ncy9XYWxsYWJ5U2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxNQUFhLFlBQVk7SUFJckIsWUFBb0IsRUFBTyxFQUFVLFFBQWlCLEVBQVUsY0FBOEI7UUFBMUUsT0FBRSxHQUFGLEVBQUUsQ0FBSztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVM7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRWxHLElBQUksS0FBSztRQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVPLGVBQWUsQ0FBQyxJQUFjO1FBQ2xDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFSyxnQkFBZ0I7UUFDcEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUN4QixPQUFPLENBQUMsR0FBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUMsT0FBTyxDQUFBO1lBQzNELElBQUksT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBRXpDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7Z0JBQ3RCLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBYyxFQUFFLEVBQUU7b0JBQzFDLElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7b0JBQzdELElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7b0JBQ3ZELE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQy9DO1lBRUEsTUFBYyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3JDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMxQixNQUFjLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdEMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRXhCLE1BQWMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsVUFBVSxDQUFDO1FBQzFFLENBQUMsQ0FBQTtRQUVELElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFVBQVUsRUFBRTtZQUMzQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDbEUsSUFBSSxRQUFRLEdBQUcsU0FBUyxHQUFHLElBQUksR0FBRyxpQkFBaUIsQ0FBQztZQUNwRCxJQUFJLFdBQVcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxPQUFPLFdBQXFDLENBQUM7U0FDaEQ7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0o7QUF0REQsb0NBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogIENvcHlyaWdodCAoYykgRG9saXR0bGUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCJAZG9saXR0bGUvdHlwZXNjcmlwdC5idWlsZFwiO1xuXG5leHBvcnQgdHlwZSBTZXR1cENhbGxiYWNrID0gKHc6IGFueSkgPT4gdm9pZDtcblxuXG5leHBvcnQgY2xhc3MgV2FsbGFieVNldHVwIHtcbiAgICBcbiAgICBwcml2YXRlIF9zZXR1cCE6ICh3YWxsYWJ5OiBhbnkpID0+IHZvaWRcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3c6IGFueSwgcHJpdmF0ZSBfcHJvamVjdDogUHJvamVjdCwgcHJpdmF0ZSBfc2V0dXBDYWxsYmFjaz86IFNldHVwQ2FsbGJhY2spIHt9XG5cbiAgICBnZXQgc2V0dXAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXR1cCA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXR1cCA9IHRoaXMuZ2V0U2V0dXBGdW5jdGlvbigpOyBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHVwO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGdldEZ1bmN0aW9uQm9keShmdW5jOiBGdW5jdGlvbikge1xuICAgICAgICB2YXIgZW50aXJlID0gZnVuYy50b1N0cmluZygpO1xuICAgICAgICB2YXIgYm9keSA9IGVudGlyZS5zdWJzdHJpbmcoZW50aXJlLmluZGV4T2YoXCJ7XCIpICsgMSwgZW50aXJlLmxhc3RJbmRleE9mKFwifVwiKSk7XG4gICAgICAgIHJldHVybiBib2R5O1xuICAgICAgfVxuICAgICAgXG4gICAgcHJpdmF0ZSBnZXRTZXR1cEZ1bmN0aW9uKCk6ICh3YWxsYWJ5OiBhbnkpID0+IHZvaWQge1xuICAgICAgICBsZXQgc2V0dXAgPSAod2FsbGFieTogYW55KSA9PiB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYgYXMgYW55KS5JU19URVNUSU5HID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBQcm9qZWN0ID0gcmVxdWlyZSgnQGRvbGl0dGxlL3R5cGVzY3JpcHQuYnVpbGQnKS5Qcm9qZWN0XG4gICAgICAgICAgICBsZXQgcHJvamVjdCA9IG5ldyBQcm9qZWN0KHByb2Nlc3MuY3dkKCkpO1xuXG4gICAgICAgICAgICBpZiAocHJvamVjdC53b3Jrc3BhY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxpYXNlczogYW55ID0ge307XG4gICAgICAgICAgICAgICAgcHJvamVjdC53b3Jrc3BhY2VzLmZvckVhY2goKHdvcmtzcGFjZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYWNrYWdlT2JqZWN0ID0gd29ya3NwYWNlLndvcmtzcGFjZVBhY2thZ2UucGFja2FnZU9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvb3RGb2xkZXIgPSB3b3Jrc3BhY2Uud29ya3NwYWNlUGFja2FnZS5yb290Rm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICBhbGlhc2VzW3BhY2thZ2VPYmplY3QubmFtZV0gPSByb290Rm9sZGVyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoJ21vZHVsZS1hbGlhcycpLmFkZEFsaWFzZXMoYWxpYXNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgKGdsb2JhbCBhcyBhbnkpLmV4cGVjdCA9IGNoYWkuZXhwZWN0O1xuICAgICAgICAgICAgbGV0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG4gICAgICAgICAgICAoZ2xvYmFsIGFzIGFueSkuc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xuICAgICAgICAgICAgbGV0IHNpbm9uQ2hhaSA9IHJlcXVpcmUoJ3Npbm9uLWNoYWknKTtcbiAgICAgICAgICAgIGxldCBjaGFpQXNQcm9taXNlZCA9IHJlcXVpcmUoJ2NoYWktYXMtcHJvbWlzZWQnKTtcbiAgICAgICAgICAgIGNoYWkudXNlKHNpbm9uQ2hhaSk7XG4gICAgICAgICAgICBjaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG4gICAgICAgIFxuICAgICAgICAgICAgKGdsb2JhbCBhcyBhbnkpLm1vY2sgPSByZXF1aXJlKCdAZmx1ZmZ5LXNwb29uL3N1YnN0aXR1dGUnKS5TdWJzdGl0dXRlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3NldHVwQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBzZXR1cEJvZHkgPSB0aGlzLmdldEZ1bmN0aW9uQm9keShzZXR1cCk7XG4gICAgICAgICAgICB2YXIgc2V0dXBDYWxsYmFja0JvZHkgPSB0aGlzLmdldEZ1bmN0aW9uQm9keSh0aGlzLl9zZXR1cENhbGxiYWNrKTtcbiAgICAgICAgICAgIHZhciBjb21iaW5lZCA9IHNldHVwQm9keSArICdcXG4nICsgc2V0dXBDYWxsYmFja0JvZHk7XG4gICAgICAgICAgICB2YXIgbmV3RnVuY3Rpb24gPSBuZXcgRnVuY3Rpb24oY29tYmluZWQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0Z1bmN0aW9uIGFzICh3YWxsYWJ5OiBhbnkpID0+IHZvaWQ7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHNldHVwO1xuICAgIH1cbn0iXX0=
